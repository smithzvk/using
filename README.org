
* =Using=

This small tool allows you to what bindings are in effect within a block of
code.  It is around 15 lines of actual code and has no dependencies.

This was something that I have seen several people request, but often lament
that it was not available in any language that they knew of.  I thought it would
be an interesting task to implement this feature in a Common Lisp macro.

Now people can take note of this and no longer say that they don't know of a
language that has this ability.  They can also remember that a strong macro
system is a great feature for a language to have.

** Usage

#+BEGIN_SRC lisp
  (let ((x 1) (y 2))
    (using (x y)
      (+ x y)))
  => 3

  (let ((x 1) (y 2))
    (using (x)
      (+ x y)))
  => Error
#+END_SRC

A sufficiently smart compiler (like SBCL) can detect violations at compile time.

#+BEGIN_SRC lisp
  (defun test (x y)
    (using (x)
      (+ x y)))
  ; ...
  ; caught STYLE-WARNING:
  ;   The variable Y is defined but never used.
  ; ...
  ; caught WARNING:
  ;   undefined variable: Y
  ; ...
#+END_SRC

The compiler issues two warnings.  First, it issues a style warning because it
detects that the binding of =y= on the function parameter list isn't used.  It
knows that because it understands that the use of =y= within the =using= scope
isn't a valid reference to the =y= passed in to the function.  The second
warning is that the reference to =y= in the =using= body can't be resolved.

** License

#+BEGIN_EXAMPLE
Copyright (c) 2016, Zach Kost-Smith
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.
    * Neither the name of the software nor the names of its contributors may be
      used to endorse or promote products derived from this software without
      specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#+END_EXAMPLE
